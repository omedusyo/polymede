
fn-rec sum = # Int -> Int : { sum, n .
  match n {
  | 0 . 0
  | _ .
    n + sum(n - 1)
  }
}

fn-rec fib = # Int -> Int : { fib n .
  match n {
  | 0 . 0
  | 1 . 1
    // Note that this need not be a tail-call
    fib(n - 1) + fib(n - 2)
  }
}



sum(5)
(fn-rec { ... })(5)
(fn-rec { ... })(4)    5 + _ :: []
(fn-rec { ... })(3)    4 + _ :: 5 + _ :: []
(fn-rec { ... })(2)    3 + _ :: 4 + _ :: 5 + _ :: []
(fn-rec { ... })(1)    2 + _ :: 3 + _ :: 4 + _ :: 5 + _ :: []
(fn-rec { ... })(0)    1 + _ :: 2 + _ :: 3 + _ :: 4 + _ :: 5 + _ :: []



fn-rec iterateUntil = # forall a . # Fn(a -> Bool), a, Fn(a -> a) -> a : { iterateUntil, test, a, f .
  match apply(test,a) {
  | T . a
  | F . iterateUntil(test, apply(f, a), f)
  }
}
