
type Bool = enum { T | F }

type Nat = ind { nat .
| Zero
| Succ(nat)
}

type List(a) = ind { x .
| Nil
| Cons(a, x)
}


type Bar(a) = enum {
| A(a, List(a), Fn(a -> a))
}

type F = ind { x .
| Foo(Fn(Fn(x -> Bool) -> Bool))
}

fn square = # Nat -> Nat : { x . x }

