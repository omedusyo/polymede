/ This is a comment
type Bool = enum {
| T
| F
}

// this is also a comment.
// think that `x := Nat`, so that
// Nat = Z | S(Nat)
type Nat = ind { x .
| Z
| S(x)
}

type Empty = enum {
}

type Unit = enum {
| Unit
}

type Tuple1(a) = enum {
| Tuple1(a)
}

type Pair(a, b) = enum {
| Pair(a, b)
}

type List(a) = ind { x .
| Nil
| Cons(a, x)
}

foreign "i32_add"
fn i32_add : I32, I32 -> I32

fn i32_test = # I32 -> Pair(I32, I32) : { x . Pair(-002147483648, x) }

fn is_zero = # I32 -> Bool : { x .
  match x {
  | 0 . T
  | _ . F
  }
}

fn id_bool = # Bool -> Bool : { x . x }

fn not = # Bool -> Bool : { x .
  match x {
  | T . F
  | F . id_bool(id_bool(T))
  }
}

fn add = # Nat, Nat -> Nat : { x, y .
  fold x {
  | Z . y
  | S(result) . S(id<Nat>(result))
  }
}

fn mul = # Nat, Nat -> Nat : { x, y .
  fold x {
  | Z . Z
  | S(result) . add(y, result)
  }
}

fn square = # Nat -> Nat : { x .
  mul(x, x)
}

fn id = forall { a .
  # a -> a : { x . x }
}

fn twice = forall { a . # Fn(a -> a), a -> a : { f, a . apply f to (apply f to (a)) }}

fn map = forall { a, b . # Fn(a -> b), List(a) -> List(b) : { f, xs .
  fold xs {
  | Nil . Nil
  | Cons(x, state) . Cons(apply f to (x), state)
  }
}}

fn filter = forall { a . # Fn(a -> Bool), List(a) -> List(a) : { f, xs .
  fold xs {
  | Nil . Nil
  | Cons(x, filtered_tail) .
    match apply f to (x) {
    | T . Cons(x, filtered_tail)
    | F . filtered_tail
    }
  }
}}

fn contradict = forall { a . # Empty -> a : { c .
  match c {}
}}

fn first = forall { a, b . # Pair(a, b) -> a : { pair .
  match pair {
  | Pair(x, _) . x
  }
}}

fn second = forall { a, b . # Pair(a, b) -> b : { pair .
  match pair { Pair(_, y) . y }
}}

fn tuple = forall { a, b, x . # Fn(x -> a), Fn(x -> b) -> Fn(x -> Pair(a, b)) : { f, g .
  fn { x . Pair(apply f to (x), apply # Fn(x -> b) : g to (x)) }
}}

fn curry = forall { a, b, c . # Fn(a, b -> c) -> Fn(a -> Fn(b -> c)) : { f .
  fn { x .
    fn { y .
      apply f to (x, y)
    }
  }
}}

fn empty_list = forall { a . # -> List(a) : { . Nil } }

fn range_reverse_iter = # Nat -> Pair(List(Nat), Nat) : { n .
  fold n {
  | Z . Pair(Nil, Z)
  | S(Pair(xs, count)) . Pair(Cons(count, xs), add(count, S(Z)))
  }
}

fn range_reverse = # Nat -> List(Nat) : { n .
  first<List(Nat), Nat>(range_reverse_iter(n))
}

fn range = # Nat -> List(Nat) : { n .
  match n {
  | Z . Nil
  | S(m) . Cons(n, # List(Nat) : range(# Nat : m))
  }
}

fn example0 = # -> List(Nat) : { .
  map<Nat, Nat>(fn { x . square(x) }, range(S(S(S(Z)))))
}


run # Bool : T
