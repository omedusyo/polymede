
// we can think that closure application is defined somehow as follows
let apply = # forall A B .
  # Fn(A -> B), A -> B
  fn { f, a .
    // runs the code of f in environment that's stored in the closure.
    ...
  }

let closure = # forall A B .
  # (A -> B) -> Fn(A -> B)
  // capture of local environment is happening here
  fn { f .
    ...
  }

// Partial application.

let add1 =
  # Fn(Nat -> Nat)
  fn { x . add(1, x) }

let addClosure =
  # Nat -> Fn(Nat -> Nat)
  fn { x . # Fn(Nat -> Nat) : fn { add(x, y) } }


// So basically `fn` is an operator, that takes in a judgment 
//     # Int -> Int { x . x * x }
// and turns it into an actual value?
let square = # Fn[Int -> Int] :
  fn # Int -> Int : { x . x * x }

// hmmm, what's the point of the above?
// I can do...
let square = # Int -> Int : { x . x * x }

// Is this ok? This is kinda pointless because it doesn't capture any variables.
let squareLambda = # Fn[Int -> Int]
  fn square
// or maybe? Somehow creation of coinductive things should be distinguished maybe?
  fn<square>

// TODO: Maybe I should actually have two separate
// namespaces for outer and local bindings?
// Because it seems that these things are not really values.
// They don't really have normal types. They are not first class.
// They are more values on meta-level. And they have meta-types (judgments?)

fn adder = # Int -> Fn(Int -> Int) : { x .
  let incBy = fn # Fn[Int -> Int] : { y .
    x + y
  };
  incBy // Now this actually captures x.
}

// How to apply squareLambda to an argument?
apply squareLambda(5)


// Pair[A, B]
let mapFirst =
  # forall A B .
  # Fn[A -> A'], Pair[A, B] -> Pair[A', B]
  fn { f, Pair(x, y) . Pair(f(x), y) }
}

let map = # forall A B .
  # Fn[A -> B], List[A] -> List[B]
  fn { f, xs .
    fold xs {
    | Nil . Nil
    | Cons(x, result) . Cons(f(x), result)
    }
  }

// Syntactic sugar?
fn map[A, B](f: A -> B, xs: List[A]): List[B] = fold xs {
| Nil . Nil
| Cons(x, result) . Cons(f(x), result)
}

let exampleList1 =
  # List[Int]
  map(# Fn[Int -> Int] : fn { x . x * x }), exampleList0)

let filter = # forall A .
  # Fn[A, Bool], List[A] -> List[A]
  fn { f, xs .
    fold xs {
    | Nil . Nil
    | Cons(x, result) .
      match x {
      | True . Cons(x, result)
      | False . result
      }
    }
  }

let foldl = # forall A X
  # List[A], X, Fn[A, X -> X] -> 
  fn { as, initialState, update .
    apply
      (fold as {
      | Nil .
        fn { state . state }
      | Cons(a, result) .
        fn { state . apply update(state, a) }
      })(initialState)
  }

